// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: reminder.sql

package db

import (
	"context"
	"time"

	"github.com/tabbed/pqtype"
)

const createReminder = `-- name: CreateReminder :one
INSERT INTO reminders (
  user_id,
  website_url,
  interval,
  extension
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, website_url, interval, updated_at, extension
`

type CreateReminderParams struct {
	UserID     int64                 `json:"user_id"`
	WebsiteUrl string                `json:"website_url"`
	Interval   int64                 `json:"interval"`
	Extension  pqtype.NullRawMessage `json:"extension"`
}

func (q *Queries) CreateReminder(ctx context.Context, arg CreateReminderParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, createReminder,
		arg.UserID,
		arg.WebsiteUrl,
		arg.Interval,
		arg.Extension,
	)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebsiteUrl,
		&i.Interval,
		&i.UpdatedAt,
		&i.Extension,
	)
	return i, err
}

const deleteReminder = `-- name: DeleteReminder :exec
DELETE FROM reminders
WHERE id = $1 AND website_url = $2
`

type DeleteReminderParams struct {
	ID         int64  `json:"id"`
	WebsiteUrl string `json:"website_url"`
}

func (q *Queries) DeleteReminder(ctx context.Context, arg DeleteReminderParams) error {
	_, err := q.db.ExecContext(ctx, deleteReminder, arg.ID, arg.WebsiteUrl)
	return err
}

const getReminder = `-- name: GetReminder :one
SELECT id, user_id, website_url, interval, updated_at, extension FROM reminders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetReminder(ctx context.Context, id int64) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, getReminder, id)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebsiteUrl,
		&i.Interval,
		&i.UpdatedAt,
		&i.Extension,
	)
	return i, err
}

const getReminderConfigs = `-- name: GetReminderConfigs :one
SELECT extension FROM reminders
WHERE id = $1 AND website_url = $2
FOR NO KEY UPDATE
`

type GetReminderConfigsParams struct {
	ID         int64  `json:"id"`
	WebsiteUrl string `json:"website_url"`
}

func (q *Queries) GetReminderConfigs(ctx context.Context, arg GetReminderConfigsParams) (pqtype.NullRawMessage, error) {
	row := q.db.QueryRowContext(ctx, getReminderConfigs, arg.ID, arg.WebsiteUrl)
	var extension pqtype.NullRawMessage
	err := row.Scan(&extension)
	return extension, err
}

const listReminders = `-- name: ListReminders :many
SELECT id, user_id, website_url, interval, updated_at, extension FROM reminders
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRemindersParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReminders(ctx context.Context, arg ListRemindersParams) ([]Reminder, error) {
	rows, err := q.db.QueryContext(ctx, listReminders, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Reminder{}
	for rows.Next() {
		var i Reminder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.WebsiteUrl,
			&i.Interval,
			&i.UpdatedAt,
			&i.Extension,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setNewInterval = `-- name: SetNewInterval :one
UPDATE reminders
SET interval = $1
WHERE id = $2 AND website_url = $3
RETURNING id, user_id, website_url, interval, updated_at, extension
`

type SetNewIntervalParams struct {
	NewInterval int64  `json:"new_interval"`
	ID          int64  `json:"id"`
	WebsiteUrl  string `json:"website_url"`
}

func (q *Queries) SetNewInterval(ctx context.Context, arg SetNewIntervalParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, setNewInterval, arg.NewInterval, arg.ID, arg.WebsiteUrl)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebsiteUrl,
		&i.Interval,
		&i.UpdatedAt,
		&i.Extension,
	)
	return i, err
}

const setReminderConfigs = `-- name: SetReminderConfigs :one
UPDATE reminders
SET extension = $1
WHERE id = $2 AND website_url = $3
RETURNING id, user_id, website_url, interval, updated_at, extension
`

type SetReminderConfigsParams struct {
	UpdatedExtension pqtype.NullRawMessage `json:"updated_extension"`
	ID               int64                 `json:"id"`
	WebsiteUrl       string                `json:"website_url"`
}

func (q *Queries) SetReminderConfigs(ctx context.Context, arg SetReminderConfigsParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, setReminderConfigs, arg.UpdatedExtension, arg.ID, arg.WebsiteUrl)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebsiteUrl,
		&i.Interval,
		&i.UpdatedAt,
		&i.Extension,
	)
	return i, err
}

const updateReminder = `-- name: UpdateReminder :one
UPDATE reminders
SET updated_at = $1
WHERE id = $2 AND website_url = $3
RETURNING id, user_id, website_url, interval, updated_at, extension
`

type UpdateReminderParams struct {
	UpdatedAt  time.Time `json:"updated_at"`
	ID         int64     `json:"id"`
	WebsiteUrl string    `json:"website_url"`
}

func (q *Queries) UpdateReminder(ctx context.Context, arg UpdateReminderParams) (Reminder, error) {
	row := q.db.QueryRowContext(ctx, updateReminder, arg.UpdatedAt, arg.ID, arg.WebsiteUrl)
	var i Reminder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WebsiteUrl,
		&i.Interval,
		&i.UpdatedAt,
		&i.Extension,
	)
	return i, err
}
