// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  hashed_password,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, full_name, hashed_password, email, password_changed_at, created_at, is_activated
`

type CreateUserParams struct {
	FullName       string `json:"full_name"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsActivated,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :one
UPDATE users
SET is_activated = false
WHERE id = $1 AND email = $2
RETURNING id, full_name, hashed_password, email, password_changed_at, created_at, is_activated
`

type DeactivateUserParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) DeactivateUser(ctx context.Context, arg DeactivateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, deactivateUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsActivated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, hashed_password, email, password_changed_at, created_at, is_activated FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsActivated,
	)
	return i, err
}
